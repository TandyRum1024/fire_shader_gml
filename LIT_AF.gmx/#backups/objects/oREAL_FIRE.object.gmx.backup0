// 2020-04-09 04:19:47
#event create THANOS CAR
/// THANOS CAR
time = 0;
mouse_xprev = -1;
mouse_yprev = -1;
clearSurface = true; // variable to clear the surfaces on first frame

// Screen size related
WIN_WID = room_width;
WIN_HEI = room_height;
RES_WID = WIN_WID;
RES_HEI = WIN_HEI;

// Fire's cooling map texture. Different noise means different patterns of fire.
texCoolingMap = sprite_get_texture(texPerlin, 0);

// The Fire buffer[tm]; We'll use this to calculate the fire and smoke.
surfFire = surface_create(RES_WID, RES_HEI);
surfFireTemp = surface_create(RES_WID, RES_HEI); // temporary buffer surface to hold the calculated result of fire
texFire = surface_get_texture(surfFire);

// Regular surface / source image; we're gonna draw this onto fire buffer, fully white. 
surfGame = surface_create(RES_WID, RES_HEI);

// Shader uniforms
// fire calculation
uCoolingMap = shader_get_sampler_index(shd_fire, "u_coolingmap");
uSource = shader_get_sampler_index(shd_fire, "u_source");
uTextureSize = shader_get_uniform(shd_fire, "u_texturesize");
uTime = shader_get_uniform(shd_fire, "u_time");
uScrollSpeed = shader_get_uniform(shd_fire, "u_scrollspeed");
uWindStrength = shader_get_uniform(shd_fire, "u_windstrength");
uWindSpeed = shader_get_uniform(shd_fire, "u_windspeed");

// Disintegration
uBurnIntensity = shader_get_uniform(shd_burn, "u_intensity");
uBurnMap = shader_get_sampler_index(shd_burn, "u_texture");
uBurnTime = shader_get_sampler_index(shd_burn, "u_time");

// Linear interpolation settings & font
texture_set_interpolation(true);
draw_set_font(fntHangul);

#event step Surface heartbeat & time update
// Check if surfaces are long goner & rebuild it
if (!surface_exists(surfFire))
{
    surfFire = surface_create(RES_WID, RES_HEI);
    texFire = surface_get_texture(surfFire);
}

if (!surface_exists(surfFireTemp))
    surfFireTemp = surface_create(RES_WID, RES_HEI);

if (!surface_exists(surfGame))
    surfGame = surface_create(RES_WID, RES_HEI);

// time
time += 2;

#section Goto next room
if (keyboard_check_pressed(vk_enter))
    room_goto(rm_cartoon);

#event other_room_end Free memories
if (surface_exists(surfFire))
{
    surface_set_target(surfFire);
    draw_clear_alpha(0, 0);
    surface_reset_target();
    surface_set_target(surfFireTemp);
    draw_clear_alpha(0, 0);
    surface_reset_target();
    surface_free(surfFire);
    surface_free(surfFireTemp);
    texFire = -1;
    surfFireTemp = -1;
}
    
if (surface_exists(surfGame))
{
    surface_set_target(surfGame);
    draw_clear_alpha(0, 0);
    surface_reset_target();
    surface_free(surfGame);
}

#event draw Draw regular surfaces
surface_set_target(surfGame);
draw_clear_alpha(0, 0);

// Keep creating fire by setting the bottom rows white
var _hei = 4;
var _fireblue = $ffffff;
draw_rectangle_colour(0, RES_HEI - _hei, RES_WID, RES_HEI, _fireblue, _fireblue, _fireblue, _fireblue, false);

// center pos
var _cx = RES_WID >> 1;
var _cy = RES_HEI >> 1;


// Burning stuff
shader_set(shd_burn);

shader_set_uniform_f(uBurnTime, time);
texture_set_stage(uBurnMap, texCoolingMap);

shader_set_uniform_f(uBurnIntensity, sin(time * 0.018) * 0.5 + 0.5);
draw_sprite_ext(sprMEAT, 0, _cx - 80, _cy + 150, 0.75, 0.75, sin(time * 0.1) * 8, c_white, 1.0);

shader_set_uniform_f(uBurnIntensity, cos(time * 0.018) * 0.5 + 0.5);
draw_sprite_ext(sprGHERKIN, 0, _cx + 80, _cy + 150, 1, 1, cos(time * 0.1 + 42) * 8, c_white, 1.0);

// random gibberish
shader_set_uniform_f(uBurnIntensity, sin(time * 0.058) * 0.1 + 0.2);
draw_set_halign(1);draw_set_valign(1);
draw_set_font(fntLobster);

var _rainbow = 0;//make_colour_hsv(time * 2, 255, 255); <- Change 0 to this if you want rainbow
draw_text_transformed_colour((RES_WID >> 1), (RES_HEI >> 1) - 150, "Gherkin  Time", 1.5, 1.5, 0, _rainbow, _rainbow, _rainbow, _rainbow, 1.0);

draw_set_font(fntHangul);
draw_set_halign(0);draw_set_valign(0);

shader_reset();


// Dancing blokes
draw_sprite_ext(sprDUANESPIN, time * 0.5, _cx - 300, _cy + 150, 1, 1, 0, c_white, 1);
draw_sprite_ext(sprDUANESPIN, time * 0.5, _cx + 300, _cy + 150, 1, 1, 0, c_white, 1);

surface_reset_target();

#section Fire effect
// 1] Calculate fire using surfFire & save it to temporary surface
surface_set_target(surfFireTemp);
shader_set(shd_fire);
// uniforms
texFire = surface_get_texture(surfFire);
shader_set_uniform_f(uTextureSize, RES_WID, RES_HEI); // Texture size
shader_set_uniform_f(uTime, time); // Time
shader_set_uniform_f(uScrollSpeed, 4); // Fire Scroll speed
shader_set_uniform_f(uWindStrength, 1.5); // Wind strength
shader_set_uniform_f(uWindSpeed, 1.5); // Wind speed
texture_set_stage(uCoolingMap, texCoolingMap); // Cooling map
texture_set_stage(uSource, texFire); // Source Texture of surfFire

// Surface -- You can use any surfaces
// In fact, this could be anything that covers the entire surface and having UVs on it
// As all we need is the UV information and some vertices passed by drawing the surface, Thus the contents of surface does not matter at all!
draw_surface(surfFire, 0, 0);
shader_reset();
surface_reset_target();

// 1-1] Transfer the calculated fire effect to original surfFire surface
surface_set_target(surfFire);
draw_surface(surfFireTemp, 0, 0);
surface_reset_target();

// 2-1] Draw background
draw_clear(0);
draw_sprite(bgKot, 0, WIN_WID / 2, WIN_HEI / 2);


// 2-2] Draw fire with results from [1]
draw_set_blend_mode(bm_add);
shader_set(shd_fire_effect);
draw_surface_stretched(surfFire, 0, 0, WIN_WID, WIN_HEI);
shader_reset();
draw_set_blend_mode(bm_normal);


// Plop source image on top of it
draw_surface_stretched(surfGame, 0, 0, WIN_WID, WIN_HEI);
#section Fire buffer update
surface_set_target(surfFire);

// Clear the contents of surface to prevent digital gunks on first frame
if (clearSurface)
{
    clearSurface = false;
    draw_clear(0);
}

// Draw source image / regular surface fully white
d3d_set_fog(true, c_white, 0, 0);
draw_surface(surfGame, 0, 0);
d3d_set_fog(false, 0, 0, 0);

// Draw fire with mouse
var _ratiox = mouse_x / (WIN_WID / RES_WID);
var _ratioy = mouse_y / (WIN_HEI / RES_HEI);
var _subs = 16;
    
if (mouse_check_button(mb_left))
{
    for (var i=0; i<=_subs; i++)
    {
        var _incr = i / _subs;
        draw_circle_colour(lerp(_ratiox, mouse_xprev, _incr), lerp(_ratioy, mouse_yprev, _incr), 16, c_white, c_white, false);
    }
}

mouse_xprev = _ratiox;
mouse_yprev = _ratioy;
surface_reset_target();


#event draw_gui
// info
draw_text(10, 10, "Press <Enter> key for next demo#Drag with mouse to draw fire");