// 2019-01-10 00:12:11
//
// Simple passthrough vertex shader
//
attribute vec3 in_Position;                  // (x,y,z)
//attribute vec3 in_Normal;                  // (x,y,z)     unused in this shader.	
attribute vec4 in_Colour;                    // (r,g,b,a)
attribute vec2 in_TextureCoord;              // (u,v)

varying vec2 v_vTexcoord;
varying vec4 v_vColour;

void main()
{
    vec4 object_space_pos = vec4( in_Position.x, in_Position.y, in_Position.z, 1.0);
    gl_Position = gm_Matrices[MATRIX_WORLD_VIEW_PROJECTION] * object_space_pos;
    
    v_vColour = in_Colour;
    v_vTexcoord = in_TextureCoord;
}

//######################_==_YOYO_SHADER_MARKER_==_######################@~//
// WAWAWAWAWAWAWA
// - SANS
// - PAPYRUS
// - sans culottes
// - PEEP
varying vec2 v_vTexcoord;
varying vec4 v_vColour;

uniform float intensity;

void main()
{
    vec4 composite = v_vColour * texture2D( gm_BaseTexture, v_vTexcoord );
    
    /*
        BRUH
    */
    for (int i=0; i<16; i++)
    {
        float fli = float(i) * 0.0625;
        vec3 sampA = texture2D(gm_BaseTexture, v_vTexcoord + vec2(0.015 * fli, 0.0)).rgb;
        vec3 sampB = texture2D(gm_BaseTexture, v_vTexcoord - vec2(0.015 * fli, 0.0)).rgb;
        
        // ((pixelColor.rgb - 0.5f) * max(Contrast, 0)) + 0.5f;
        float lumA = (sampA.r + sampA.g + sampA.b) / 2.0;
        lumA = (((lumA - 0.5) * 2.0) + 0.5) * (1.6 - fli);
        
        float lumB = (sampB.r + sampB.g + sampB.b) / 2.0;
        lumB = (((lumB - 0.5) * 2.0) + 0.5) * (1.6 - fli);
        
        composite.rgb = clamp(composite.rgb + ((sampA * lumA + sampB * lumB) / 16.0) * intensity, 0.0, 1.0);
    }
    
    gl_FragColor = composite;
}

